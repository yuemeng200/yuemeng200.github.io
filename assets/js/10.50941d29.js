(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{400:function(t,s,a){t.exports=a.p+"assets/img/image-20220320223552324.1d348c12.png"},445:function(t,s,a){"use strict";a.r(s);var e=a(56),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),e("h2",{attrs:{id:"_1、介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、介绍"}},[t._v("#")]),t._v(" 1、介绍")]),t._v(" "),e("p",[e("code",[t._v("正则表达式")]),t._v("可以看做是一种用来描述字符串"),e("code",[t._v("模式匹配")]),t._v("规则的协议，通过遵循这种协议的语义，我们向正则解析引擎描述自己需要找出什么样的子串。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("正则表达式的底层实现原理十分复杂（事实上就是仅仅学会正则的用法都不能算是很简单的事情），但可以肯定的一点是，正则模式匹配的平均效率一定比所有你能想到的模型匹配算法要高效得多，所以 "),e("strong",[t._v("Just use it！")])])]),t._v(" "),e("h2",{attrs:{id:"_2、体验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、体验"}},[t._v("#")]),t._v(" 2、体验")]),t._v(" "),e("p",[t._v("前端验证密码复杂性是正则表达式十分重要的使用场景，我们直接从一个实际问题上手，验证用户设置的密码必须满足以下规则：")]),t._v(" "),e("ul",[e("li",[t._v("同时包含数字、大小写字母和特殊字符。")]),t._v(" "),e("li",[t._v("长度不低于 8 位。")])]),t._v(" "),e("p",[t._v("在表单验证场景下，这算比较基础的问题，是如果不使用正则而纯粹手写验证逻辑却几乎无从下手的。\n下面直接给出我所想到的一种正则模式："),e("strong",[e("code",[t._v("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^\\da-zA-Z\\s]).{8,}$")])]),t._v("。\n现在看不懂没关系，毕竟我也刚学会。")]),t._v(" "),e("p",[t._v("顺便先说下有了正则表达式应该怎么去使用，正则表达式本身在各种语言是通用的，只是调用的"),e("code",[t._v("api")]),t._v("略有差异。\n在 JS 中直接通过字面量（"),e("code",[t._v("/我是正则/")]),t._v("）或者使用构造函数（"),e("code",[t._v('new RegExp("我是正则")')]),t._v("）两种方式定义都可以。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(400),alt:"image-20220320223552324"}})]),t._v(" "),e("blockquote",[e("p",[t._v("其中"),e("code",[t._v("exex")]),t._v("和"),e("code",[t._v("test")]),t._v("是"),e("code",[t._v("RegExp")]),t._v("对象的方法，其余是"),e("code",[t._v("String")]),t._v("的方法。在后面会详细介绍这些方法。")])]),t._v(" "),e("p",[t._v("比如上面验证密码的可以封装到一个函数里：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" re "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^\\da-zA-Z\\s]).{8,}$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1Password."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("一般情况下建议不要使用"),e("code",[t._v("new RegExp()")]),t._v("传入字符串的方式来声明正则对象，因为正则里有太多使用"),e("code",[t._v("\\")]),t._v("作为前缀的转义字符表示，而字符串本身也有转义符号，且两者根本不兼容。举个栗子，"),e("code",[t._v("\\s")]),t._v("在正则里用来匹配空白字符（包括空格、tab、换行），如果我们写成"),e("code",[t._v('new RegExp("\\s")')]),t._v("，js 引擎会直接当作我们写的是"),e("code",[t._v('new RegExp("s")')]),t._v("，因为字符串里根本没有"),e("code",[t._v("\\s")]),t._v("这种转义，所以直接就帮我们删掉了，那怎么解决呢？就是必须再转义一次写成"),e("code",[t._v('new RegExp("\\\\s")')]),t._v("，当转义较多时这样很容易出错，而使用字面量的方式直接用"),e("code",[t._v("/\\s/")]),t._v("就行了。")])]),t._v(" "),e("h2",{attrs:{id:"_3、基本匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、基本匹配"}},[t._v("#")]),t._v(" 3、基本匹配")]),t._v(" "),e("h3",{attrs:{id:"_1-普通字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-普通字符"}},[t._v("#")]),t._v(" (1) 普通字符")]),t._v(" "),e("p",[t._v("一个普通字符单元用来匹配"),e("code",[t._v("一个")]),t._v("真实的字符。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("表示")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("[ABC]")]),t._v(" "),e("td",[t._v("匹配 [...] 中任一字符")])]),t._v(" "),e("tr",[e("td",[t._v("[^abc]")]),t._v(" "),e("td",[t._v("匹配 [...] 以外的任一字符")])]),t._v(" "),e("tr",[e("td",[t._v("[A-Z]")]),t._v(" "),e("td",[t._v("匹配区间 A-Z 中任一字符")])]),t._v(" "),e("tr",[e("td",[t._v("\\d")]),t._v(" "),e("td",[t._v("匹配数字")])]),t._v(" "),e("tr",[e("td",[t._v("\\D")]),t._v(" "),e("td",[t._v("匹配非数字")])]),t._v(" "),e("tr",[e("td",[t._v("\\n")]),t._v(" "),e("td",[t._v("匹配换行符")])]),t._v(" "),e("tr",[e("td",[t._v("\\r")]),t._v(" "),e("td",[t._v("匹配回车符")])]),t._v(" "),e("tr",[e("td",[t._v(".")]),t._v(" "),e("td",[t._v("匹配除了换行和回车以外的任一字符")])]),t._v(" "),e("tr",[e("td",[t._v("\\s")]),t._v(" "),e("td",[t._v("匹配空白符，包括空格、制表符、换页符和换行符")])]),t._v(" "),e("tr",[e("td",[t._v("\\S")]),t._v(" "),e("td",[t._v("匹配非空白符")])]),t._v(" "),e("tr",[e("td",[t._v("\\w")]),t._v(" "),e("td",[t._v("匹配任一字母、数字或下划线，等价于[0-9a-zA-Z_]")])])])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("[]")]),t._v("内的特殊字符在不引发歧义的情况下是不需要转义的。因为里面是不允许有限定符、定位符等的，只能是字符本身。")])]),t._v(" "),e("h3",{attrs:{id:"_2-限定符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-限定符"}},[t._v("#")]),t._v(" (2) 限定符")]),t._v(" "),e("p",[t._v("限定符用于限制前面字符单元（字符或表达式）出现的次数。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("表示")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("?")]),t._v(" "),e("td",[t._v("修饰前面的表达式出现 0 次或 1 次")])]),t._v(" "),e("tr",[e("td",[t._v("+")]),t._v(" "),e("td",[t._v("修饰前面的表达式出现 1 次或多次")])]),t._v(" "),e("tr",[e("td",[t._v("*")]),t._v(" "),e("td",[t._v("修饰前面的表达式出现任意次")])]),t._v(" "),e("tr",[e("td",[t._v("{}")]),t._v(" "),e("td",[t._v("匹配次数限定符")])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("+")]),t._v("和"),e("code",[t._v("\\*")]),t._v("默认开启贪婪匹配，在其后添加"),e("code",[t._v("?")]),t._v("可开启非贪婪模式。")])]),t._v(" "),e("h3",{attrs:{id:"_3-定位符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-定位符"}},[t._v("#")]),t._v(" (3) 定位符")]),t._v(" "),e("p",[t._v("定位符本身不匹配真实的字符，而是限制匹配的开始和结束位置。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("表示")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("^")]),t._v(" "),e("td",[t._v("匹配输入字符串开始的位置")])]),t._v(" "),e("tr",[e("td",[t._v("$")]),t._v(" "),e("td",[t._v("匹配输入字符串结尾的位置")])]),t._v(" "),e("tr",[e("td",[t._v("\\b")]),t._v(" "),e("td",[t._v("匹配一个单词边界，即字与空格间的位置。")])]),t._v(" "),e("tr",[e("td",[t._v("\\B")]),t._v(" "),e("td",[t._v("匹配非单词边界")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("正则被用于字段规则验证时，"),e("code",[t._v("^")]),t._v("和"),e("code",[t._v("$")]),t._v("可以说是必用的。")])]),t._v(" "),e("h2",{attrs:{id:"_4、高级匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、高级匹配"}},[t._v("#")]),t._v(" 4、高级匹配")]),t._v(" "),e("h3",{attrs:{id:"_1-捕获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-捕获"}},[t._v("#")]),t._v(" (1) 捕获")]),t._v(" "),e("p",[e("code",[t._v("()")]),t._v("用来修饰一个字符表达式，同时会产生附加的捕获效果，可以在后面引用前面的捕获的内容，如"),e("code",[t._v("/(...)\\1/")]),t._v("。\n除此之外在"),e("code",[t._v("()")]),t._v("内部匹配的结果会被缓存下来。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123a456b"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([0-9]+)([a-z])")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['123a', '456b']")]),t._v("\n")])])]),e("blockquote",[e("p",[e("code",[t._v("g")]),t._v("是修饰符代表全局匹配。\n如果只是为了构造表达式不希望有缓存效果（只为了检验），可以使用"),e("code",[t._v("(?:)")]),t._v("消除缓存效果。")])]),t._v(" "),e("h3",{attrs:{id:"_2-断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-断言"}},[t._v("#")]),t._v(" (2) 断言")]),t._v(" "),e("p",[t._v("其实定位符也算是一种断言，是一种对位置的断言。这里要说的断言更像一种广义的判断，满足继续、不满足终止。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("表示")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("(?=)")]),t._v(" "),e("td",[t._v("正向满足前进")])]),t._v(" "),e("tr",[e("td",[t._v("(?!)")]),t._v(" "),e("td",[t._v("正向不满足前进")])]),t._v(" "),e("tr",[e("td",[t._v("(?<=)")]),t._v(" "),e("td",[t._v("逆向满足前进")])]),t._v(" "),e("tr",[e("td",[t._v("(?<!>)")]),t._v(" "),e("td",[t._v("逆向不满足前进")])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("目前来看我觉得这是正则里最不容易理解的内容，也是十分强大的功能，文章最开始的密码验证的关键就是使用断言描述。事实上只需要正向断言就能解决所有问题，为了避免混淆，可以尽量只使用一个方向的断言。")])]),t._v(" "),e("p",[t._v("为什么"),e("code",[t._v("/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^\\da-zA-Z\\s]).{8,}$/")]),t._v("可以用来检验字符串满足：")]),t._v(" "),e("ul",[e("li",[t._v("同时包含数字、大小写、特殊字符")]),t._v(" "),e("li",[t._v("至少 8 位")])]),t._v(" "),e("p",[t._v("这里使用的正向满足断言，即在"),e("code",[t._v("^")]),t._v("匹配后（字符串一旦起始）开始逐个断言，首先是要匹配一个以数字结束的子串，关键的地方在于断言是"),e("code",[t._v("非捕获")]),t._v("的，即一旦判断成功就相当于逐个断言从未存在过一样，不会影响后面的任何匹配，之后继续判断以小写字母结尾、以大写字母结尾、以特殊符号结尾，如果断言都成功说明真的存在这些类型的字符，最后我们还要满足位数的要求。至此就写好的。\n断言就是这样强大，其非捕获的特性使其可以有"),e("code",[t._v("且")]),t._v("的效果，又不影响后续的判断。\n逆向断言同理，就是说我匹配后再向前去断言。")]),t._v(" "),e("h3",{attrs:{id:"_3-修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-修饰符"}},[t._v("#")]),t._v(" (3) 修饰符")]),t._v(" "),e("p",[e("strong",[t._v("/pattern/flags")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("修饰符")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("i")]),t._v(" "),e("td",[t._v("ignore: 忽略大小写")])]),t._v(" "),e("tr",[e("td",[t._v("g")]),t._v(" "),e("td",[t._v("global: 全局匹配")])]),t._v(" "),e("tr",[e("td",[t._v("y")]),t._v(" "),e("td",[t._v("sticky: 粘性匹配")])]),t._v(" "),e("tr",[e("td",[t._v("m")]),t._v(" "),e("td",[t._v("mutipal-line: 多行匹配")])]),t._v(" "),e("tr",[e("td",[t._v("s")]),t._v(" "),e("td",[t._v("开启"),e("code",[t._v(".")]),t._v("包含换行符")])])])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("g")]),t._v("和"),e("code",[t._v("y")]),t._v("修饰的正则都是有状态的（有"),e("code",[t._v("lastIndex")]),t._v("属性），区别在于"),e("code",[t._v("g")]),t._v("的表现总是一次匹配全部，"),e("code",[t._v("y")]),t._v("每次只匹配一个。")])]),t._v(" "),e("h2",{attrs:{id:"_5、在-javascript-中使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、在-javascript-中使用"}},[t._v("#")]),t._v(" 5、在 Javascript 中使用")]),t._v(" "),e("h3",{attrs:{id:"regexp-prototype-test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test"}},[t._v("#")]),t._v(" RegExp.prototype.test()")]),t._v(" "),e("p",[t._v("test() 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false。\n如果正则表达式设置了全局标志，test() 的执行会改变正则表达式 lastIndex 属性。连续的执行 test()方法，后续的执行将会从 lastIndex 处开始匹配字符串（初始为 0）。")]),t._v(" "),e("h3",{attrs:{id:"regexp-prototype-exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec"}},[t._v("#")]),t._v(" RegExp.prototype.exec()")]),t._v(" "),e("p",[t._v("exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。\n结果数组"),e("code",[t._v("[0]")]),t._v("是全部匹配的结果（不区分是否捕获），"),e("code",[t._v("[1, n]")]),t._v("为所有捕获分组。除此之外数组还有额外属性"),e("code",[t._v("index")]),t._v("和"),e("code",[t._v("input")]),t._v("代表当前匹配起始位置和原始输入。")]),t._v(" "),e("blockquote",[e("p",[t._v("可以使用"),e("code",[t._v("(?<group-name>content)")]),t._v("来命名捕获。\n对于全局捕获，每次执行会更新正则匹配状态。")])]),t._v(" "),e("h3",{attrs:{id:"string-prototype-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search"}},[t._v("#")]),t._v(" String.prototype.search()")]),t._v(" "),e("p",[t._v("类似于"),e("code",[t._v("RegExp.prototype.test()")]),t._v("，如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引;否则，返回 -1。")]),t._v(" "),e("h3",{attrs:{id:"string-prototype-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match"}},[t._v("#")]),t._v(" String.prototype.match()")]),t._v(" "),e("p",[t._v("和"),e("code",[t._v("RegExp.prototype.exec()")]),t._v("表现一致，但在"),e("code",[t._v("g")]),t._v("时不同，这个会直接输出所有匹配结果的列表，但无法输出任何捕获的相关信息。")]),t._v(" "),e("h3",{attrs:{id:"string-prototype-matchall"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-matchall"}},[t._v("#")]),t._v(" String.prototype.matchAll()")]),t._v(" "),e("p",[t._v("matchAll() 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。通过解构迭代器，可以达到数组效果，很好用。")]),t._v(" "),e("blockquote",[e("p",[t._v("除此之外，还有"),e("code",[t._v("splot()")]),t._v("和"),e("code",[t._v("replace")]),t._v("方法可以使用正则表达式，不再赘述。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("t(e)(st(\\d?))")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test1test2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" array "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// expected output: Array ["test1", "e", "st1", "1"]')]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// expected output: Array ["test2", "e", "st2", "2"]')]),t._v("\n")])])]),e("h2",{attrs:{id:"_6、经典案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、经典案例"}},[t._v("#")]),t._v(" 6、经典案例")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("电子邮箱")]),t._v("："),e("code",[t._v("^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$")])]),t._v(" "),e("li",[e("strong",[t._v("网址")]),t._v("："),e("code",[t._v("^(((http|https|ftp):\\/\\/)?([[a-zA-Z0-9]\\-\\.])+(\\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\\/+=%&_\\.~?\\-]*))*$")])])]),t._v(" "),e("h2",{attrs:{id:"_7、相关资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、相关资源"}},[t._v("#")]),t._v(" 7、相关资源")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("regex101 在线测试工具"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN 文档"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.runoob.com/regexp/regexp-intro.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("菜鸟教程"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/cdoco/learn-regex-zh",target:"_blank",rel:"noopener noreferrer"}},[t._v("github 文档"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("🎉🎉🎉")])])}),[],!1,null,null,null);s.default=_.exports}}]);