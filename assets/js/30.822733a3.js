(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{433:function(t,a,s){"use strict";s.r(a);var e=s(56),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第2章-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第2章-对象"}},[t._v("#")]),t._v(" 第2章 对象")]),t._v(" "),s("h2",{attrs:{id:"_1、介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、介绍"}},[t._v("#")]),t._v(" 1、介绍")]),t._v(" "),s("h3",{attrs:{id:"_1-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-属性"}},[t._v("#")]),t._v(" （1）属性")]),t._v(" "),s("p",[t._v("对象是属性的集合，每个属性都有名字和值，名字可以是"),s("code",[t._v("字符串")]),t._v("或"),s("code",[t._v("符号")]),t._v("。")]),t._v(" "),s("p",[t._v("设置及访问对象属性有两种书写方式，分别为"),s("code",[t._v("object.property")]),t._v("和"),s("code",[t._v('object["perperty"]')]),t._v("。")]),t._v(" "),s("p",[t._v("每个属性还有三个"),s("code",[t._v("属性特性")]),t._v("（元属性），用来限制能对该属性做"),s("strong",[t._v("什么")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("writable（可写）")]),t._v(" "),s("p",[t._v("是否允许设置属性的值")])]),t._v(" "),s("li",[s("p",[t._v("enumerable（可枚举）")]),t._v(" "),s("p",[t._v("是否可被枚举，限制遍历属性时的可见性")])]),t._v(" "),s("li",[s("p",[t._v("configurable（可配置）")]),t._v(" "),s("p",[t._v("是否可delete，以及属性特性是否可被修改")])])]),t._v(" "),s("blockquote",[s("p",[t._v("大部分内置对象是只读、不可枚举和不可配置的，而默认创建的对象是可写、可枚举和可配置的。")])]),t._v(" "),s("h3",{attrs:{id:"_2-原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型"}},[t._v("#")]),t._v(" （2）原型")]),t._v(" "),s("p",[t._v("对象可以从其他对象继承属性，这个被继承的对象称为其"),s("code",[t._v("原型")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("区别于其他语言子类和父类间的继承关系，js中不存在其他语言的类的概念的，js是一切皆为对象，不区分类以及通过该类创建的对象实体。")])]),t._v(" "),s("p",[t._v("想到继承我们自然能想到一种对象间层层链接的关系，我们称其为"),s("code",[t._v("原型链")]),t._v("，对于任一条原型链一定有一个顶级对象没有原型，这个顶级对象是"),s("code",[t._v("Object.prototype")]),t._v("，它是任何"),s("code",[t._v("Object对象")]),t._v("的原型，包括我们使用"),s("code",[t._v("new Object()")]),t._v("和通过"),s("code",[t._v("对象字面量")]),t._v("创建的对象都继承于此。")]),t._v(" "),s("h2",{attrs:{id:"_2、创建对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、创建对象"}},[t._v("#")]),t._v(" 2、创建对象")]),t._v(" "),s("p",[t._v("对象可通过"),s("code",[t._v("字面量")]),t._v("、"),s("code",[t._v("new关键字")]),t._v("和"),s("code",[t._v("Object.create()")]),t._v("函数创建，下面分别介绍。")]),t._v(" "),s("h3",{attrs:{id:"_1-字面量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-字面量"}},[t._v("#")]),t._v(" （1）字面量")]),t._v(" "),s("p",[t._v("对象字面量是一个表达式，每次求值都会创建一个新的对象。")]),t._v(" "),s("h3",{attrs:{id:"_2-new操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-new操作符"}},[t._v("#")]),t._v(" （2）new操作符")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("new后面跟的是"),s("code",[t._v("构造函数")]),t._v("，除了内置的构造函数，我们还可以自定义构造函数，在后续章节会介绍。")]),t._v(" "),s("h3",{attrs:{id:"_3-object-create"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-object-create"}},[t._v("#")]),t._v(" （3）Object.create()")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("参数为其所继承的原型。")]),t._v(" "),s("h2",{attrs:{id:"_3、属性操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、属性操作"}},[t._v("#")]),t._v(" 3、属性操作")]),t._v(" "),s("h3",{attrs:{id:"_1-访问属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-访问属性"}},[t._v("#")]),t._v(" （1）访问属性")]),t._v(" "),s("p",[t._v("属性的访问会沿着整条原型链，直到查询到该属性或查询到为null的对象。")]),t._v(" "),s("p",[t._v("访问不存在的属性不是错误，会返回"),s("code",[t._v("undefined")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_2-属性赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-属性赋值"}},[t._v("#")]),t._v(" （2）属性赋值")]),t._v(" "),s("p",[t._v("对属性的赋值究竟是触发"),s("code",[t._v("添加新属性")]),t._v("还是"),s("code",[t._v("修改属性值")]),t._v("效果还需要进行一些判断。")]),t._v(" "),s("p",[t._v("考虑给对象"),s("code",[t._v("o")]),t._v("的"),s("code",[t._v("x")]),t._v("属性赋值：")]),t._v(" "),s("ul",[s("li",[t._v("如果o具有一个名为x的"),s("code",[t._v("自有可写")]),t._v("属性，修改操作成功。（不可写时操作失败）")]),t._v(" "),s("li",[t._v("如果o继承了一个名为x的"),s("code",[t._v("可写")]),t._v("属性，这次赋值会创建一个名为x的属性，"),s("code",[t._v("覆盖")]),t._v("继承的同名属性。(只读时失败)")]),t._v(" "),s("li",[t._v("如果o继承的是一个"),s("strong",[t._v("访问器属性")]),t._v("，会调用访问器方法，不会创建新属性。")])]),t._v(" "),s("blockquote",[s("p",[t._v("访问器属性在后面介绍。")])]),t._v(" "),s("h3",{attrs:{id:"_3-删除属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-删除属性"}},[t._v("#")]),t._v(" （3）删除属性")]),t._v(" "),s("p",[s("code",[t._v("delete")]),t._v("只可删除"),s("strong",[t._v("configurable为true的自有属性")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("🔔可见对属性的操作一定不会影响到其原型。")])]),t._v(" "),s("h3",{attrs:{id:"_4-测试属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-测试属性"}},[t._v("#")]),t._v(" （4）测试属性")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"in"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in"}},[t._v("#")]),t._v(" "),s("strong",[t._v("in")])]),t._v(" "),s("p",[t._v("能测试自有属性和继承属性。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意"),s("code",[t._v("for/in")]),t._v("遍历时只能遍历可枚举属性，这里是判断操作。")])])]),t._v(" "),s("li",[s("h4",{attrs:{id:"hasownproperty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hasownproperty"}},[t._v("#")]),t._v(" "),s("strong",[t._v("hasOwnProperty()")])]),t._v(" "),s("p",[t._v("能测试自有属性。")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"propertyisenumerable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#propertyisenumerable"}},[t._v("#")]),t._v(" "),s("strong",[t._v("propertyIsEnumerable()")])]),t._v(" "),s("p",[t._v("能测试可枚举的自有属性。")])])]),t._v(" "),s("h3",{attrs:{id:"_5-枚举属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-枚举属性"}},[t._v("#")]),t._v(" （5）枚举属性")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"object-keys"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[t._v("#")]),t._v(" Object.keys()")]),t._v(" "),s("p",[t._v("返回可枚举自有属性名数组。")]),t._v(" "),s("blockquote",[s("p",[t._v("最常用。")])])]),t._v(" "),s("li",[s("h4",{attrs:{id:"object-getownpropertynames"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames"}},[t._v("#")]),t._v(" Object.getOwnPropertyNames()")]),t._v(" "),s("p",[t._v("返回所有自有属性名数组。")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"reflect-ownkeys"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-ownkeys"}},[t._v("#")]),t._v(" Reflect.ownKeys()")]),t._v(" "),s("p",[t._v("返回所有属性名的数组。")])])]),t._v(" "),s("h3",{attrs:{id:"_6-拓展对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-拓展对象"}},[t._v("#")]),t._v(" （6）拓展对象")]),t._v(" "),s("p",[t._v("即将一个对象的属性复制到另一个对象上，同时会覆盖目标对象上的同名属性。")]),t._v(" "),s("p",[t._v("可以使用"),s("code",[t._v("for/of")]),t._v("遍历赋值，也可使用"),s("code",[t._v("Object.assign()")]),t._v("函数：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("至少有"),s("code",[t._v("目标对象")]),t._v("和"),s("code",[t._v("来源对象")]),t._v("两个参数，各来源对象按照顺序依次对目标对象进行拓展操作，可见当存在多个同名属性时真正起作用的是"),s("code",[t._v("最右侧")]),t._v("的来源对象，函数修改目标对象并返回。")]),t._v(" "),s("blockquote",[s("p",[t._v("可以看做对象间从右向左的属性间的合并操作。")])]),t._v(" "),s("p",[t._v("于是当不希望更新同名属性时可采用如下写法：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拓展完再把同名的更新回来")]),t._v("\n")])])]),s("p",[t._v("除了使用该拓展函数，还可在使用字面量写法创建对象时通过"),s("code",[t._v("拓展操作符...")]),t._v("来达到相同效果：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("k")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("也是从左向右进行的。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意"),s("code",[t._v("...")]),t._v("并非真正的操作符，尽在对象字面量中有拓展对象的功能，在其他上下文中别的作用。")])]),t._v(" "),s("h2",{attrs:{id:"_4、对象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、对象方法"}},[t._v("#")]),t._v(" 4、对象方法")]),t._v(" "),s("p",[t._v("以下是"),s("code",[t._v("Object.prototype")]),t._v("上的通用方法：")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString()")]),t._v(" "),s("p",[t._v("在需要对象的字符串表示时自动调用，默认不提供太多信息，需要覆盖重写。")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"valueof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#valueof"}},[t._v("#")]),t._v(" valueOf()")]),t._v(" "),s("p",[t._v("在需要对象的非字符串原始类型值时自动调用（通常是数值）")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"tojson"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tojson"}},[t._v("#")]),t._v(" toJSON()")]),t._v(" "),s("p",[t._v("其实"),s("code",[t._v("Object.prototype")]),t._v("上并没有定义该方法，而是一般内置对象都定义了。在"),s("code",[t._v("对象序列化")]),t._v("（serialization）时需要调用该方法。")]),t._v(" "),s("p",[t._v("序列化指把对象状态转换成字符串，之后能恢复到原来状态的机制，用于数据交换。基于"),s("code",[t._v("JSON")]),t._v("格式的转换使用"),s("code",[t._v("JSON.stringify()")]),t._v("和"),s("code",[t._v("JSON.parse()")]),t._v("，注意并非所有类型对象的序列化都能完美恢复。")])])]),t._v(" "),s("h2",{attrs:{id:"_5、补充语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、补充语法"}},[t._v("#")]),t._v(" 5、补充语法")]),t._v(" "),s("p",[t._v("介绍一些在es的最近几个版本中加入的关于对象字面量的新功能。")]),t._v(" "),s("h3",{attrs:{id:"_1-省略属性值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-省略属性值"}},[t._v("#")]),t._v(" （1）省略属性值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-计算属性名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算属性名"}},[t._v("#")]),t._v(" （2）计算属性名")]),t._v(" "),s("p",[t._v("即用表达式的值作为属性名：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAME")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-符号作为属性名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-符号作为属性名"}},[t._v("#")]),t._v(" （3）符号作为属性名")]),t._v(" "),s("p",[t._v("前面已经提到过，下面说说需要的场景：")]),t._v(" "),s("p",[t._v("当需要向从第三方代码取得的对象添加新属性时，可能会引发不受控的属性名冲突，此时使用符号作为属性名就可以避免这种风险。")]),t._v(" "),s("h3",{attrs:{id:"_4-方法属性的简写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法属性的简写"}},[t._v("#")]),t._v(" （4）方法属性的简写")]),t._v(" "),s("p",[t._v("过去这样定义方法属性：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("简写后是这样：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("感觉可读性增强了，注意到"),s("code",[t._v("vue")]),t._v("语法中普遍采用这种写法。")]),t._v(" "),s("h3",{attrs:{id:"_5-访问器属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-访问器属性"}},[t._v("#")]),t._v(" （5）访问器属性")]),t._v(" "),s("p",[t._v("之前我们讨论的属性更准确地说应该称为"),s("code",[t._v("数据属性")]),t._v("，其实还可以有一个"),s("code",[t._v("访问器属性")]),t._v("，包括"),s("code",[t._v("获取方法")]),t._v("（getter）和"),s("code",[t._v("设置方法")]),t._v("（setter），如果没有定义设置方法称该访问器属性是只读的。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dataProp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("accessorProp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("accessorProp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可见访问器方法和普通方法的区别就是属性名前有"),s("code",[t._v("get")]),t._v("和"),s("code",[t._v("set")]),t._v("标志，访问器属性的意义在于其所表达的语义。")]),t._v(" "),s("h2",{attrs:{id:"_6、object-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、object-api"}},[t._v("#")]),t._v(" 6、Object API")]),t._v(" "),s("p",[t._v("关于"),s("code",[t._v("Object")]),t._v("有很多重要的api，有些在前面已经提到过。")]),t._v(" "),s("h3",{attrs:{id:"_1-静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-静态方法"}},[t._v("#")]),t._v(" （1）静态方法")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"object-assign"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-assign"}},[t._v("#")]),t._v(" Object.assign()")]),t._v(" "),s("p",[t._v("方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"object-create"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-create"}},[t._v("#")]),t._v(" Object.create()")]),t._v(" "),s("p",[t._v("用于创建对象。")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"object-defineproperty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty"}},[t._v("#")]),t._v(" Object.defineProperty()")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.defineProperty() - JavaScript | MDN (mozilla.org)"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给对象添加一个属性并指定该属性的配置，其配置"),s("code",[t._v("get()")]),t._v("和"),s("code",[t._v("set()")]),t._v("。是"),s("code",[t._v("Vue")]),t._v("实现变化侦测的关键。")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"object-setprototypeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-setprototypeof"}},[t._v("#")]),t._v(" Object.setPrototypeOf()")]),t._v(" "),s("p",[t._v("设置一个指定的对象的原型到另一个对象或 "),s("code",[t._v("null")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"_7、其他对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、其他对象"}},[t._v("#")]),t._v(" 7、其他对象")]),t._v(" "),s("h3",{attrs:{id:"_1-date"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-date"}},[t._v("#")]),t._v(" （1）Date")]),t._v(" "),s("p",[s("code",[t._v("Date()")]),t._v("返回当前时间的字符串。")]),t._v(" "),s("p",[s("code",[t._v("new Date()")]),t._v("返回时间对象，但其表现还是字符串，具有很多实例方法。")]),t._v(" "),s("h3",{attrs:{id:"_2-json对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-json对象"}},[t._v("#")]),t._v(" （2）JSON对象")]),t._v(" "),s("p",[t._v("JSON 格式（JavaScript Object Notation 的缩写）是一种用于数据交换的文本格式。注意json本身就是个字符串，只是字符串按照一定格式，容易被解析。")]),t._v(" "),s("p",[t._v("它有两个静态方法："),s("code",[t._v("JSON.stringify()")]),t._v("和"),s("code",[t._v("JSON.parse()")]),t._v("。")]),t._v(" "),s("p",[t._v("如果对象的属性是"),s("code",[t._v("undefined")]),t._v("、函数或 XML 对象，该属性会被"),s("code",[t._v("JSON.stringify")]),t._v("过滤。")]),t._v(" "),s("p",[t._v("如果参数对象有自定义的"),s("code",[t._v("toJSON")]),t._v("方法，那么"),s("code",[t._v("JSON.stringify")]),t._v("会使用这个方法的返回值作为参数，而忽略原对象的其他属性。")])])}),[],!1,null,null,null);a.default=r.exports}}]);