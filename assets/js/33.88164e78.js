(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{446:function(t,a,s){"use strict";s.r(a);var r=s(56),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第-1-章-动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-1-章-动态规划"}},[t._v("#")]),t._v(" 第 1 章 动态规划")]),t._v(" "),s("h2",{attrs:{id:"_1、需要关注的点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、需要关注的点"}},[t._v("#")]),t._v(" 1、需要关注的点")]),t._v(" "),s("h3",{attrs:{id:"_1-dp-数组以及下标的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-dp-数组以及下标的含义"}},[t._v("#")]),t._v(" (1) dp 数组以及下标的含义")]),t._v(" "),s("p",[t._v("这个阶段要想清楚数组是一维的还是二维的，数组下标以及数组值的含义。")]),t._v(" "),s("h3",{attrs:{id:"_2-确定递推公式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-确定递推公式"}},[t._v("#")]),t._v(" (2) 确定递推公式")]),t._v(" "),s("p",[t._v("确定递归关系。")]),t._v(" "),s("h3",{attrs:{id:"_3-dp-数组初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-dp-数组初始化"}},[t._v("#")]),t._v(" (3) dp 数组初始化")]),t._v(" "),s("p",[t._v("某些场景下是需要的。")]),t._v(" "),s("h3",{attrs:{id:"_4-遍历顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-遍历顺序"}},[t._v("#")]),t._v(" (4) 遍历顺序")]),t._v(" "),s("p",[t._v("这个比较讲究，尤其对于二维的，主要依据还是递推关系，确保依赖项总是比递推项先得到结果。通过双重循环变量的内外层关系也要注意。")])])}),[],!1,null,null,null);a.default=_.exports}}]);