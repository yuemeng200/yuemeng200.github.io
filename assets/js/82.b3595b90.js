(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{510:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第-3-章-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-数组"}},[t._v("#")]),t._v(" 第 3 章 数组")]),t._v(" "),s("h2",{attrs:{id:"_1、创建数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建数组"}},[t._v("#")]),t._v(" 1、创建数组")]),t._v(" "),s("h3",{attrs:{id:"_1-字面量方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-字面量方法"}},[t._v("#")]),t._v(" （1）字面量方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("元素间通过逗号分隔，元素为空时表示"),s("code",[t._v("稀疏数组")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"_2-拓展操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-拓展操作符"}},[t._v("#")]),t._v(" （2）拓展操作符")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [0, 1, 2, 3, 4]")]),t._v("\n")])])]),s("p",[t._v("数组字面量的拓展操作符适用于任何"),s("code",[t._v("可迭代对象")]),t._v("，是一种"),s("code",[t._v("浅拷贝")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意区别于之前的拓展操作符在对象字面量中拓展对象属性的用法。")])]),t._v(" "),s("h3",{attrs:{id:"_3-array-构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-array-构造函数"}},[t._v("#")]),t._v(" （3）Array() 构造函数")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("不传")]),t._v("参数创建空数组。")]),t._v(" "),s("li",[t._v("传"),s("code",[t._v("单个数值")]),t._v("参数指定数组长度。")]),t._v(" "),s("li",[t._v("传"),s("code",[t._v("多个")]),t._v("参数或"),s("code",[t._v("单个非数值")]),t._v("参数代表初始数组元素。")])]),t._v(" "),s("h3",{attrs:{id:"_4-array-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-array-of"}},[t._v("#")]),t._v(" （4）Array.of()")]),t._v(" "),s("p",[s("code",[t._v("Array.of()")]),t._v(" 和 "),s("code",[t._v("Array()")]),t._v(" 构造函数之间的区别在于处理整数参数：")]),t._v(" "),s("p",[s("code",[t._v("Array.of(7)")]),t._v(" 创建一个具有单个元素 "),s("strong",[t._v("7")]),t._v(" 的数组，而 "),s("code",[t._v("Array(7)")]),t._v("创建一个长度为 7 的空数组（**注意：**这是指一个有 7 个空位的数组，而不是由 7 个"),s("code",[t._v("undefined")]),t._v("组成的数组）。")]),t._v(" "),s("h3",{attrs:{id:"_5-array-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-array-from"}},[t._v("#")]),t._v(" （5）Array.from()")]),t._v(" "),s("p",[t._v("ES6 新增"),s("strong",[t._v("工厂函数")]),t._v("。传入"),s("code",[t._v("可迭代对象")]),t._v("或"),s("code",[t._v("类数组对象")]),t._v("生成数组，第二个参数可传入函数，数组的每个元素传入该函数，以返回值作为数组的实际元素。类似于后面提到的"),s("code",[t._v("map()")]),t._v("方法。")]),t._v(" "),s("h2",{attrs:{id:"_2、数组长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、数组长度"}},[t._v("#")]),t._v(" 2、数组长度")]),t._v(" "),s("p",[t._v("数组长度通过"),s("code",[t._v("array.length")]),t._v("获取，对于稠密数组该值表示数组元素数量，对于稀疏数组则不是这样，下面介绍稀疏数组。")]),t._v(" "),s("p",[s("code",[t._v("稀疏数组")]),t._v("相当于包含"),s("code",[t._v("undefined")]),t._v("元素（稀疏项）的非稀疏数组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 101")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("稀疏数组实际上是以一种压缩的形式存储的。")])]),t._v(" "),s("p",[t._v("可以通过"),s("code",[t._v("push()")]),t._v("和"),s("code",[t._v("delete")]),t._v("添加和删除数组元素，注意 delete 不会影响数组长度，只是把删除元素换为"),s("code",[t._v("undefined")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_3、数组方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、数组方法"}},[t._v("#")]),t._v(" 3、数组方法")]),t._v(" "),s("h3",{attrs:{id:"_1-原地操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-原地操作"}},[t._v("#")]),t._v(" (1) 原地操作")]),t._v(" "),s("p",[t._v("原地操作会修改数组本身。")]),t._v(" "),s("h4",{attrs:{id:"push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[t._v("#")]),t._v(" push() ⭐️")]),t._v(" "),s("p",[t._v("返回修改后数组长度，下面三个相同。")]),t._v(" "),s("h4",{attrs:{id:"pop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pop"}},[t._v("#")]),t._v(" pop() ⭐️")]),t._v(" "),s("h4",{attrs:{id:"shift"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shift"}},[t._v("#")]),t._v(" shift()")]),t._v(" "),s("p",[t._v("前置 pop。")]),t._v(" "),s("h4",{attrs:{id:"unshift"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unshift"}},[t._v("#")]),t._v(" unshift()")]),t._v(" "),s("p",[t._v("每次在"),s("code",[t._v("head")]),t._v("位置"),s("code",[t._v("push")]),t._v("元素。")]),t._v(" "),s("h4",{attrs:{id:"fill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fill"}},[t._v("#")]),t._v(" fill() ⭐️")]),t._v(" "),s("p",[t._v("快速"),s("code",[t._v("填充")]),t._v("方法，第一个参数为填充元素，后两个可选参数用来指定填充范围，不指定默认全部填充。\n⚠️ 考虑下面的代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" doubleArr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndoubleArr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("此时快速创建了一个"),s("code",[t._v("二维数组")]),t._v("，但是事实上所有内层数组都指向同一个数组，这里的"),s("code",[t._v("new Array()")]),t._v("只会执行一次，太坑了。所以"),s("code",[t._v("fill()")]),t._v("方法事实上只能填充"),s("code",[t._v("value")]),t._v("，而不是"),s("code",[t._v("obj")]),t._v("。\n可以用下面的方法快速生成二维数组：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" doubleArr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("很是巧妙。可以把"),s("code",[t._v("Array()")]),t._v("当作"),s("code",[t._v("new Array()")]),t._v("来使用。")])]),t._v(" "),s("h4",{attrs:{id:"sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[t._v("#")]),t._v(" sort() ⭐️")]),t._v(" "),s("p",[t._v("排序，"),s("code",[t._v("sort(compareFunction)")]),t._v("，🔔不指定排序函数默认把元素转化为字符串后升序排序，所以对数值数组排序是不对的。\n升序：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-非原地方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-非原地方法"}},[t._v("#")]),t._v(" (2) 非原地方法")]),t._v(" "),s("p",[t._v("不修改原来数组，返回新的数组。")]),t._v(" "),s("h4",{attrs:{id:"slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[t._v("#")]),t._v(" slice()")]),t._v(" "),s("p",[t._v("切片，"),s("code",[t._v("slice(start, end)")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"splice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#splice"}},[t._v("#")]),t._v(" splice()")]),t._v(" "),s("p",[t._v("可同时执行删除和插入操作。\n"),s("code",[t._v("splice(pos, delete_num, [...add_elem])")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("vue2")]),t._v("无法监听通过索引对数组的修改。除了"),s("code",[t._v("Vue.set()")]),t._v("以外还能使用"),s("code",[t._v("splice()")]),t._v("，因为已经重写了该方法。")])]),t._v(" "),s("h4",{attrs:{id:"concat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[t._v("#")]),t._v(" concat()")]),t._v(" "),s("p",[t._v("合并数组，"),s("code",[t._v("concat(...array)")])]),t._v(" "),s("h4",{attrs:{id:"reverse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[t._v("#")]),t._v(" reverse()")]),t._v(" "),s("p",[t._v("翻转数组")]),t._v(" "),s("p",[t._v("迭代方法是指一系列能够顺序地对数组的每一元素进行操作的方法。传入的第一个参数都是一个操作函数，不会对稀疏数组中的"),s("code",[t._v("undefined")]),t._v("元素作用该函数。")]),t._v(" "),s("h3",{attrs:{id:"_3-迭代操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-迭代操作"}},[t._v("#")]),t._v(" (3) 迭代操作")]),t._v(" "),s("p",[t._v("迭代操作会访问到所有元素，用来操作、审查元素。")]),t._v(" "),s("h4",{attrs:{id:"foreach"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[t._v("#")]),t._v(" forEach()")]),t._v(" "),s("p",[t._v("最基本的迭代方法，无返回值。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("array1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("element")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map()")]),t._v(" "),s("p",[t._v("迭代每一个元素，把"),s("strong",[t._v("函数返回值构成的数组作为方法的返回值")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[t._v("#")]),t._v(" filter()")]),t._v(" "),s("p",[t._v("是一种对数组的过滤方法，传入的是一个"),s("code",[t._v("断言函数")]),t._v("（即返回值为布尔值），方法的返回是所有经该函数后返回值为"),s("code",[t._v("true")]),t._v("的元素构成的数组。")]),t._v(" "),s("h4",{attrs:{id:"find"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#find"}},[t._v("#")]),t._v(" find()")]),t._v(" "),s("p",[t._v("查找方法，传入断言函数，"),s("strong",[t._v("返回满足条件的第一个元素")]),t._v("。")]),t._v(" "),s("p",[t._v("同理**"),s("code",[t._v("findIndex()")]),t._v("**返回元素的索引值。")]),t._v(" "),s("h4",{attrs:{id:"every-和-some"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#every-和-some"}},[t._v("#")]),t._v(" every()和 some()")]),t._v(" "),s("p",[t._v("断言方法，传入断言函数，返回值为布尔值。")]),t._v(" "),s("h4",{attrs:{id:"reduce"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[t._v("#")]),t._v(" reduce()")]),t._v(" "),s("p",[t._v("归并方法，最终产生一个值，也称为注入（inject）和折叠（fold）。\n"),s("code",[t._v("reduce(func, initValue)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\n")])])]),s("p",[t._v("接受两个参数，第一个为归并函数，第二个为初始归并值。省略第二个参数时以第一个数组元素作为初始归并值（忽略第一次归并）。\n"),s("img",{attrs:{src:"image/3-array/1657524207651.png",alt:"1657524207651"}})]),t._v(" "),s("p",[t._v("可以使用"),s("code",[t._v("reduceRight()")]),t._v("方法从右向左归并。")]),t._v(" "),s("h3",{attrs:{id:"_4-其他方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他方法"}},[t._v("#")]),t._v(" (4) 其他方法")]),t._v(" "),s("h4",{attrs:{id:"flat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flat"}},[t._v("#")]),t._v(" flat()")]),t._v(" "),s("p",[s("code",[t._v("flat()")]),t._v(" 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// expected output: [0, 1, 2, [3, 4]]")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("递归深度即为去掉的内层中括号的层数。")])]),t._v(" "),s("h4",{attrs:{id:"includes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#includes"}},[t._v("#")]),t._v(" includes()")]),t._v(" "),s("p",[t._v("检测数组元素。")]),t._v(" "),s("h4",{attrs:{id:"join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" join()")]),t._v(" "),s("p",[t._v("拼接数组为字符串，是"),s("code",[t._v("split()")]),t._v("的反函数。")]),t._v(" "),s("h2",{attrs:{id:"_4、拓展操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、拓展操作"}},[t._v("#")]),t._v(" 4、拓展操作")]),t._v(" "),s("p",[t._v("出现在等号"),s("code",[t._v("右边")]),t._v("时具有"),s("code",[t._v("解构")]),t._v("效果，用于赋值、合并数组：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以把任意可迭代对象拓展为数组：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("出现在等号左边时具有"),s("code",[t._v("收集")]),t._v("效果，")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("rest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'letter'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 在函数传参时，也有一个隐含的等号操作，所以同样可以用拓展符号。\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);